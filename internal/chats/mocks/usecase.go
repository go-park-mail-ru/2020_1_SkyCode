// Code generated by MockGen. DO NOT EDIT.
// Source: ../usecase.go

// Package mock_chats is a generated GoMock package.
package mock_chats

import (
	models "github.com/2020_1_Skycode/internal/models"
	supportChat "github.com/2020_1_Skycode/internal/tools/supportChat"
	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
	http "net/http"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// StartChat mocks base method
func (m *MockUseCase) StartChat(w http.ResponseWriter, r *http.Request) (*websocket.Conn, *supportChat.JoinStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartChat", w, r)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(*supportChat.JoinStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartChat indicates an expected call of StartChat
func (mr *MockUseCaseMockRecorder) StartChat(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChat", reflect.TypeOf((*MockUseCase)(nil).StartChat), w, r)
}

// FindChat mocks base method
func (m *MockUseCase) FindChat(w http.ResponseWriter, r *http.Request, chatID string) (*websocket.Conn, *supportChat.JoinStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindChat", w, r, chatID)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(*supportChat.JoinStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindChat indicates an expected call of FindChat
func (mr *MockUseCaseMockRecorder) FindChat(w, r, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindChat", reflect.TypeOf((*MockUseCase)(nil).FindChat), w, r, chatID)
}

// JoinUserToChat mocks base method
func (m *MockUseCase) JoinUserToChat(conn *websocket.Conn, userID uint64, userName, chatID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinUserToChat", conn, userID, userName, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinUserToChat indicates an expected call of JoinUserToChat
func (mr *MockUseCaseMockRecorder) JoinUserToChat(conn, userID, userName, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinUserToChat", reflect.TypeOf((*MockUseCase)(nil).JoinUserToChat), conn, userID, userName, chatID)
}

// LeaveUserChat mocks base method
func (m *MockUseCase) LeaveUserChat(chatID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveUserChat", chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveUserChat indicates an expected call of LeaveUserChat
func (mr *MockUseCaseMockRecorder) LeaveUserChat(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveUserChat", reflect.TypeOf((*MockUseCase)(nil).LeaveUserChat), chatID)
}

// JoinSupportToChat mocks base method
func (m *MockUseCase) JoinSupportToChat(conn *websocket.Conn, userID uint64, userName, chatID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinSupportToChat", conn, userID, userName, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinSupportToChat indicates an expected call of JoinSupportToChat
func (mr *MockUseCaseMockRecorder) JoinSupportToChat(conn, userID, userName, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinSupportToChat", reflect.TypeOf((*MockUseCase)(nil).JoinSupportToChat), conn, userID, userName, chatID)
}

// LeaveSupportChat mocks base method
func (m *MockUseCase) LeaveSupportChat(chatID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveSupportChat", chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveSupportChat indicates an expected call of LeaveSupportChat
func (mr *MockUseCaseMockRecorder) LeaveSupportChat(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveSupportChat", reflect.TypeOf((*MockUseCase)(nil).LeaveSupportChat), chatID)
}

// ReadMessageFromUSer mocks base method
func (m *MockUseCase) ReadMessageFromUSer(ws *websocket.Conn) (supportChat.InputMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessageFromUSer", ws)
	ret0, _ := ret[0].(supportChat.InputMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessageFromUSer indicates an expected call of ReadMessageFromUSer
func (mr *MockUseCaseMockRecorder) ReadMessageFromUSer(ws interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessageFromUSer", reflect.TypeOf((*MockUseCase)(nil).ReadMessageFromUSer), ws)
}

// WriteFromUserMessage mocks base method
func (m *MockUseCase) WriteFromUserMessage(message supportChat.InputMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteFromUserMessage", message)
}

// WriteFromUserMessage indicates an expected call of WriteFromUserMessage
func (mr *MockUseCaseMockRecorder) WriteFromUserMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFromUserMessage", reflect.TypeOf((*MockUseCase)(nil).WriteFromUserMessage), message)
}

// GetChats mocks base method
func (m *MockUseCase) GetChats() []*models.Chat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChats")
	ret0, _ := ret[0].([]*models.Chat)
	return ret0
}

// GetChats indicates an expected call of GetChats
func (mr *MockUseCaseMockRecorder) GetChats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChats", reflect.TypeOf((*MockUseCase)(nil).GetChats))
}

// StoreMessage mocks base method
func (m *MockUseCase) StoreMessage(message *models.ChatMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMessage indicates an expected call of StoreMessage
func (mr *MockUseCaseMockRecorder) StoreMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMessage", reflect.TypeOf((*MockUseCase)(nil).StoreMessage), message)
}

// GetChatMessages mocks base method
func (m *MockUseCase) GetChatMessages(chatID string) ([]*models.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessages", chatID)
	ret0, _ := ret[0].([]*models.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMessages indicates an expected call of GetChatMessages
func (mr *MockUseCaseMockRecorder) GetChatMessages(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessages", reflect.TypeOf((*MockUseCase)(nil).GetChatMessages), chatID)
}

// GetChat mocks base method
func (m *MockUseCase) GetChat(chatID string) *supportChat.SupportChat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", chatID)
	ret0, _ := ret[0].(*supportChat.SupportChat)
	return ret0
}

// GetChat indicates an expected call of GetChat
func (mr *MockUseCaseMockRecorder) GetChat(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockUseCase)(nil).GetChat), chatID)
}
