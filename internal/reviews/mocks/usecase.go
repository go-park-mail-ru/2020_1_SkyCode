// Code generated by MockGen. DO NOT EDIT.
// Source: ../usecase.go

// Package mock_reviews is a generated GoMock package.
package mock_reviews

import (
	models "github.com/2020_1_Skycode/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetReview mocks base method
func (m *MockUseCase) GetReview(arg0 uint64) (*models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReview", arg0)
	ret0, _ := ret[0].(*models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReview indicates an expected call of GetReview
func (mr *MockUseCaseMockRecorder) GetReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReview", reflect.TypeOf((*MockUseCase)(nil).GetReview), arg0)
}

// GetUserReviews mocks base method
func (m *MockUseCase) GetUserReviews(arg0, arg1, arg2 uint64) ([]*models.Review, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReviews", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Review)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserReviews indicates an expected call of GetUserReviews
func (mr *MockUseCaseMockRecorder) GetUserReviews(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReviews", reflect.TypeOf((*MockUseCase)(nil).GetUserReviews), arg0, arg1, arg2)
}

// UpdateReview mocks base method
func (m *MockUseCase) UpdateReview(arg0 *models.Review, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReview indicates an expected call of UpdateReview
func (mr *MockUseCaseMockRecorder) UpdateReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockUseCase)(nil).UpdateReview), arg0, arg1)
}

// DeleteReview mocks base method
func (m *MockUseCase) DeleteReview(arg0 uint64, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview
func (mr *MockUseCaseMockRecorder) DeleteReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockUseCase)(nil).DeleteReview), arg0, arg1)
}
