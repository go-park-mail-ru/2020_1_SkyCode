// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository.go

// Package mock_reviews is a generated GoMock package.
package mock_reviews

import (
	models "github.com/2020_1_Skycode/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetRatingByRestID mocks base method
func (m *MockRepository) GetRatingByRestID(arg0 uint64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatingByRestID", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRatingByRestID indicates an expected call of GetRatingByRestID
func (mr *MockRepositoryMockRecorder) GetRatingByRestID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingByRestID", reflect.TypeOf((*MockRepository)(nil).GetRatingByRestID), arg0)
}

// GetReviewsByRestID mocks base method
func (m *MockRepository) GetReviewsByRestID(arg0, arg1, arg2 uint64) ([]*models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByRestID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByRestID indicates an expected call of GetReviewsByRestID
func (mr *MockRepositoryMockRecorder) GetReviewsByRestID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByRestID", reflect.TypeOf((*MockRepository)(nil).GetReviewsByRestID), arg0, arg1, arg2)
}

// GetReviewsCountByRestID mocks base method
func (m *MockRepository) GetReviewsCountByRestID(arg0 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsCountByRestID", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsCountByRestID indicates an expected call of GetReviewsCountByRestID
func (mr *MockRepositoryMockRecorder) GetReviewsCountByRestID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsCountByRestID", reflect.TypeOf((*MockRepository)(nil).GetReviewsCountByRestID), arg0)
}

// GetReviewsByUserID mocks base method
func (m *MockRepository) GetReviewsByUserID(arg0, arg1, arg2 uint64) ([]*models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByUserID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByUserID indicates an expected call of GetReviewsByUserID
func (mr *MockRepositoryMockRecorder) GetReviewsByUserID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByUserID", reflect.TypeOf((*MockRepository)(nil).GetReviewsByUserID), arg0, arg1, arg2)
}

// GetReviewsCountByUserID mocks base method
func (m *MockRepository) GetReviewsCountByUserID(arg0 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsCountByUserID", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsCountByUserID indicates an expected call of GetReviewsCountByUserID
func (mr *MockRepositoryMockRecorder) GetReviewsCountByUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsCountByUserID", reflect.TypeOf((*MockRepository)(nil).GetReviewsCountByUserID), arg0)
}

// GetRestaurantReviewByUser mocks base method
func (m *MockRepository) GetRestaurantReviewByUser(arg0, arg1 uint64) (*models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurantReviewByUser", arg0, arg1)
	ret0, _ := ret[0].(*models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurantReviewByUser indicates an expected call of GetRestaurantReviewByUser
func (mr *MockRepositoryMockRecorder) GetRestaurantReviewByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurantReviewByUser", reflect.TypeOf((*MockRepository)(nil).GetRestaurantReviewByUser), arg0, arg1)
}

// GetReviewByID mocks base method
func (m *MockRepository) GetReviewByID(arg0 uint64) (*models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewByID", arg0)
	ret0, _ := ret[0].(*models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewByID indicates an expected call of GetReviewByID
func (mr *MockRepositoryMockRecorder) GetReviewByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewByID", reflect.TypeOf((*MockRepository)(nil).GetReviewByID), arg0)
}

// CreateReview mocks base method
func (m *MockRepository) CreateReview(arg0 *models.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReview indicates an expected call of CreateReview
func (mr *MockRepositoryMockRecorder) CreateReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockRepository)(nil).CreateReview), arg0)
}

// UpdateReview mocks base method
func (m *MockRepository) UpdateReview(arg0 *models.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReview indicates an expected call of UpdateReview
func (mr *MockRepositoryMockRecorder) UpdateReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockRepository)(nil).UpdateReview), arg0)
}

// DeleteReview mocks base method
func (m *MockRepository) DeleteReview(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview
func (mr *MockRepositoryMockRecorder) DeleteReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockRepository)(nil).DeleteReview), arg0)
}
