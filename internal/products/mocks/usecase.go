// Code generated by MockGen. DO NOT EDIT.
// Source: ../usecase.go

// Package mock_products is a generated GoMock package.
package mock_products

import (
	models "github.com/2020_1_Skycode/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method
func (m *MockUseCase) CreateProduct(product *models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct
func (mr *MockUseCaseMockRecorder) CreateProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockUseCase)(nil).CreateProduct), product)
}

// GetProductByID mocks base method
func (m *MockUseCase) GetProductByID(id uint64) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", id)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID
func (mr *MockUseCaseMockRecorder) GetProductByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockUseCase)(nil).GetProductByID), id)
}

// GetProductsByRestaurantID mocks base method
func (m *MockUseCase) GetProductsByRestaurantID(id, count, page uint64) ([]*models.Product, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByRestaurantID", id, count, page)
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProductsByRestaurantID indicates an expected call of GetProductsByRestaurantID
func (mr *MockUseCaseMockRecorder) GetProductsByRestaurantID(id, count, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByRestaurantID", reflect.TypeOf((*MockUseCase)(nil).GetProductsByRestaurantID), id, count, page)
}

// UpdateProduct mocks base method
func (m *MockUseCase) UpdateProduct(product *models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct
func (mr *MockUseCaseMockRecorder) UpdateProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockUseCase)(nil).UpdateProduct), product)
}

// UpdateProductImage mocks base method
func (m *MockUseCase) UpdateProductImage(id uint64, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductImage", id, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductImage indicates an expected call of UpdateProductImage
func (mr *MockUseCaseMockRecorder) UpdateProductImage(id, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductImage", reflect.TypeOf((*MockUseCase)(nil).UpdateProductImage), id, path)
}

// DeleteProduct mocks base method
func (m *MockUseCase) DeleteProduct(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct
func (mr *MockUseCaseMockRecorder) DeleteProduct(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockUseCase)(nil).DeleteProduct), id)
}
