// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package delivery

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE8e17a78DecodeGithubCom20201SkycodeInternalUsersDelivery(in *jlexer.Lexer, out *signUpRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "firstName":
			out.FirstName = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE8e17a78EncodeGithubCom20201SkycodeInternalUsersDelivery(out *jwriter.Writer, in signUpRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix[1:])
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"lastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v signUpRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE8e17a78EncodeGithubCom20201SkycodeInternalUsersDelivery(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v signUpRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE8e17a78EncodeGithubCom20201SkycodeInternalUsersDelivery(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *signUpRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE8e17a78DecodeGithubCom20201SkycodeInternalUsersDelivery(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *signUpRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE8e17a78DecodeGithubCom20201SkycodeInternalUsersDelivery(l, v)
}
func easyjsonE8e17a78DecodeGithubCom20201SkycodeInternalUsersDelivery1(in *jlexer.Lexer, out *editBioRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "firstName":
			out.FirstName = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE8e17a78EncodeGithubCom20201SkycodeInternalUsersDelivery1(out *jwriter.Writer, in editBioRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix[1:])
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"lastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v editBioRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE8e17a78EncodeGithubCom20201SkycodeInternalUsersDelivery1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v editBioRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE8e17a78EncodeGithubCom20201SkycodeInternalUsersDelivery1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *editBioRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE8e17a78DecodeGithubCom20201SkycodeInternalUsersDelivery1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *editBioRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE8e17a78DecodeGithubCom20201SkycodeInternalUsersDelivery1(l, v)
}
func easyjsonE8e17a78DecodeGithubCom20201SkycodeInternalUsersDelivery2(in *jlexer.Lexer, out *changePhoneNumberRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "newPhone":
			out.NewPhone = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE8e17a78EncodeGithubCom20201SkycodeInternalUsersDelivery2(out *jwriter.Writer, in changePhoneNumberRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"newPhone\":"
		out.RawString(prefix[1:])
		out.String(string(in.NewPhone))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v changePhoneNumberRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE8e17a78EncodeGithubCom20201SkycodeInternalUsersDelivery2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v changePhoneNumberRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE8e17a78EncodeGithubCom20201SkycodeInternalUsersDelivery2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *changePhoneNumberRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE8e17a78DecodeGithubCom20201SkycodeInternalUsersDelivery2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *changePhoneNumberRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE8e17a78DecodeGithubCom20201SkycodeInternalUsersDelivery2(l, v)
}
func easyjsonE8e17a78DecodeGithubCom20201SkycodeInternalUsersDelivery3(in *jlexer.Lexer, out *changePasswordRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "newPassword":
			out.NewPassword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE8e17a78EncodeGithubCom20201SkycodeInternalUsersDelivery3(out *jwriter.Writer, in changePasswordRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"newPassword\":"
		out.RawString(prefix[1:])
		out.String(string(in.NewPassword))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v changePasswordRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE8e17a78EncodeGithubCom20201SkycodeInternalUsersDelivery3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v changePasswordRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE8e17a78EncodeGithubCom20201SkycodeInternalUsersDelivery3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *changePasswordRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE8e17a78DecodeGithubCom20201SkycodeInternalUsersDelivery3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *changePasswordRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE8e17a78DecodeGithubCom20201SkycodeInternalUsersDelivery3(l, v)
}
func easyjsonE8e17a78DecodeGithubCom20201SkycodeInternalUsersDelivery4(in *jlexer.Lexer, out *UserHandler) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE8e17a78EncodeGithubCom20201SkycodeInternalUsersDelivery4(out *jwriter.Writer, in UserHandler) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserHandler) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE8e17a78EncodeGithubCom20201SkycodeInternalUsersDelivery4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserHandler) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE8e17a78EncodeGithubCom20201SkycodeInternalUsersDelivery4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserHandler) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE8e17a78DecodeGithubCom20201SkycodeInternalUsersDelivery4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserHandler) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE8e17a78DecodeGithubCom20201SkycodeInternalUsersDelivery4(l, v)
}
