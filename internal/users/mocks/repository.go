// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository.go

// Package mock_users is a generated GoMock package.
package mock_users

import (
	models "github.com/2020_1_Skycode/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InsertInto mocks base method
func (m *MockRepository) InsertInto(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertInto", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertInto indicates an expected call of InsertInto
func (mr *MockRepositoryMockRecorder) InsertInto(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertInto", reflect.TypeOf((*MockRepository)(nil).InsertInto), user)
}

// Update mocks base method
func (m *MockRepository) Update(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), user)
}

// UpdatePhone mocks base method
func (m *MockRepository) UpdatePhone(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhone", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePhone indicates an expected call of UpdatePhone
func (mr *MockRepositoryMockRecorder) UpdatePhone(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhone", reflect.TypeOf((*MockRepository)(nil).UpdatePhone), user)
}

// UpdatePassword mocks base method
func (m *MockRepository) UpdatePassword(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword
func (mr *MockRepositoryMockRecorder) UpdatePassword(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockRepository)(nil).UpdatePassword), user)
}

// UpdateAvatar mocks base method
func (m *MockRepository) UpdateAvatar(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAvatar indicates an expected call of UpdateAvatar
func (mr *MockRepositoryMockRecorder) UpdateAvatar(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockRepository)(nil).UpdateAvatar), user)
}

// GetById mocks base method
func (m *MockRepository) GetById(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetById indicates an expected call of GetById
func (mr *MockRepositoryMockRecorder) GetById(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRepository)(nil).GetById), user)
}

// GetByPhone mocks base method
func (m *MockRepository) GetByPhone(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhone", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByPhone indicates an expected call of GetByPhone
func (mr *MockRepositoryMockRecorder) GetByPhone(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhone", reflect.TypeOf((*MockRepository)(nil).GetByPhone), user)
}
