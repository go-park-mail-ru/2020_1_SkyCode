// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository.go

// Package mock_restaurants is a generated GoMock package.
package mock_restaurants

import (
	models "github.com/2020_1_Skycode/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockRepository) GetAll(count, page uint64) ([]*models.Restaurant, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", count, page)
	ret0, _ := ret[0].([]*models.Restaurant)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll
func (mr *MockRepositoryMockRecorder) GetAll(count, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll), count, page)
}

// GetByID mocks base method
func (m *MockRepository) GetByID(id uint64) (*models.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), id)
}

// GetAllInServiceRadius mocks base method
func (m *MockRepository) GetAllInServiceRadius(pos *models.GeoPos, count, page uint64) ([]*models.Restaurant, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllInServiceRadius", pos, count, page)
	ret0, _ := ret[0].([]*models.Restaurant)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllInServiceRadius indicates an expected call of GetAllInServiceRadius
func (mr *MockRepositoryMockRecorder) GetAllInServiceRadius(pos, count, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllInServiceRadius", reflect.TypeOf((*MockRepository)(nil).GetAllInServiceRadius), pos, count, page)
}

// InsertInto mocks base method
func (m *MockRepository) InsertInto(rest *models.Restaurant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertInto", rest)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertInto indicates an expected call of InsertInto
func (mr *MockRepositoryMockRecorder) InsertInto(rest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertInto", reflect.TypeOf((*MockRepository)(nil).InsertInto), rest)
}

// Update mocks base method
func (m *MockRepository) Update(rest *models.Restaurant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", rest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(rest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), rest)
}

// UpdateImage mocks base method
func (m *MockRepository) UpdateImage(rest *models.Restaurant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", rest)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImage indicates an expected call of UpdateImage
func (mr *MockRepositoryMockRecorder) UpdateImage(rest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockRepository)(nil).UpdateImage), rest)
}

// Delete mocks base method
func (m *MockRepository) Delete(restID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", restID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(restID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), restID)
}
