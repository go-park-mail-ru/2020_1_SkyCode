// Code generated by MockGen. DO NOT EDIT.
// Source: ../usecase.go

// Package mock_restaurants is a generated GoMock package.
package mock_restaurants

import (
	models "github.com/2020_1_Skycode/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetRestaurants mocks base method
func (m *MockUseCase) GetRestaurants(count, page uint64) ([]*models.Restaurant, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurants", count, page)
	ret0, _ := ret[0].([]*models.Restaurant)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRestaurants indicates an expected call of GetRestaurants
func (mr *MockUseCaseMockRecorder) GetRestaurants(count, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurants", reflect.TypeOf((*MockUseCase)(nil).GetRestaurants), count, page)
}

// GetRestaurantByID mocks base method
func (m *MockUseCase) GetRestaurantByID(id uint64) (*models.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurantByID", id)
	ret0, _ := ret[0].(*models.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurantByID indicates an expected call of GetRestaurantByID
func (mr *MockUseCaseMockRecorder) GetRestaurantByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurantByID", reflect.TypeOf((*MockUseCase)(nil).GetRestaurantByID), id)
}

// CreateRestaurant mocks base method
func (m *MockUseCase) CreateRestaurant(rest *models.Restaurant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRestaurant", rest)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRestaurant indicates an expected call of CreateRestaurant
func (mr *MockUseCaseMockRecorder) CreateRestaurant(rest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestaurant", reflect.TypeOf((*MockUseCase)(nil).CreateRestaurant), rest)
}

// UpdateRestaurant mocks base method
func (m *MockUseCase) UpdateRestaurant(rest *models.Restaurant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRestaurant", rest)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRestaurant indicates an expected call of UpdateRestaurant
func (mr *MockUseCaseMockRecorder) UpdateRestaurant(rest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRestaurant", reflect.TypeOf((*MockUseCase)(nil).UpdateRestaurant), rest)
}

// UpdateImage mocks base method
func (m *MockUseCase) UpdateImage(restID uint64, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", restID, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImage indicates an expected call of UpdateImage
func (mr *MockUseCaseMockRecorder) UpdateImage(restID, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockUseCase)(nil).UpdateImage), restID, filename)
}

// Delete mocks base method
func (m *MockUseCase) Delete(restID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", restID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUseCaseMockRecorder) Delete(restID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUseCase)(nil).Delete), restID)
}

// AddPoint mocks base method
func (m *MockUseCase) AddPoint(p *models.RestaurantPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPoint", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPoint indicates an expected call of AddPoint
func (mr *MockUseCaseMockRecorder) AddPoint(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPoint", reflect.TypeOf((*MockUseCase)(nil).AddPoint), p)
}

// GetPoints mocks base method
func (m *MockUseCase) GetPoints(restID, count, page uint64) ([]*models.RestaurantPoint, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoints", restID, count, page)
	ret0, _ := ret[0].([]*models.RestaurantPoint)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPoints indicates an expected call of GetPoints
func (mr *MockUseCaseMockRecorder) GetPoints(restID, count, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoints", reflect.TypeOf((*MockUseCase)(nil).GetPoints), restID, count, page)
}

// GetRestaurantsInServiceRadius mocks base method
func (m *MockUseCase) GetRestaurantsInServiceRadius(address string, count, page uint64) ([]*models.Restaurant, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurantsInServiceRadius", address, count, page)
	ret0, _ := ret[0].([]*models.Restaurant)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRestaurantsInServiceRadius indicates an expected call of GetRestaurantsInServiceRadius
func (mr *MockUseCaseMockRecorder) GetRestaurantsInServiceRadius(address, count, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurantsInServiceRadius", reflect.TypeOf((*MockUseCase)(nil).GetRestaurantsInServiceRadius), address, count, page)
}

// AddReview mocks base method
func (m *MockUseCase) AddReview(review *models.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", review)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReview indicates an expected call of AddReview
func (mr *MockUseCaseMockRecorder) AddReview(review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockUseCase)(nil).AddReview), review)
}

// GetReviews mocks base method
func (m *MockUseCase) GetReviews(restID, userID, count, page uint64) ([]*models.Review, *models.Review, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviews", restID, userID, count, page)
	ret0, _ := ret[0].([]*models.Review)
	ret1, _ := ret[1].(*models.Review)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetReviews indicates an expected call of GetReviews
func (mr *MockUseCaseMockRecorder) GetReviews(restID, userID, count, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviews", reflect.TypeOf((*MockUseCase)(nil).GetReviews), restID, userID, count, page)
}
