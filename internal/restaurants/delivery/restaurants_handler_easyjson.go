// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package delivery

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5eeb761bDecodeGithubCom20201SkycodeInternalRestaurantsDelivery(in *jlexer.Lexer, out *reviewRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "rate":
			if in.IsNull() {
				in.Skip()
				out.Rate = nil
			} else {
				if out.Rate == nil {
					out.Rate = new(float64)
				}
				*out.Rate = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5eeb761bEncodeGithubCom20201SkycodeInternalRestaurantsDelivery(out *jwriter.Writer, in reviewRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Text != "" {
		const prefix string = ",\"text\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"rate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Rate == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Rate))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v reviewRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5eeb761bEncodeGithubCom20201SkycodeInternalRestaurantsDelivery(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v reviewRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5eeb761bEncodeGithubCom20201SkycodeInternalRestaurantsDelivery(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *reviewRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5eeb761bDecodeGithubCom20201SkycodeInternalRestaurantsDelivery(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *reviewRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5eeb761bDecodeGithubCom20201SkycodeInternalRestaurantsDelivery(l, v)
}
func easyjson5eeb761bDecodeGithubCom20201SkycodeInternalRestaurantsDelivery1(in *jlexer.Lexer, out *restaurantRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "radius":
			out.Radius = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5eeb761bEncodeGithubCom20201SkycodeInternalRestaurantsDelivery1(out *jwriter.Writer, in restaurantRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"radius\":"
		out.RawString(prefix)
		out.Float64(float64(in.Radius))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v restaurantRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5eeb761bEncodeGithubCom20201SkycodeInternalRestaurantsDelivery1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v restaurantRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5eeb761bEncodeGithubCom20201SkycodeInternalRestaurantsDelivery1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *restaurantRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5eeb761bDecodeGithubCom20201SkycodeInternalRestaurantsDelivery1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *restaurantRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5eeb761bDecodeGithubCom20201SkycodeInternalRestaurantsDelivery1(l, v)
}
func easyjson5eeb761bDecodeGithubCom20201SkycodeInternalRestaurantsDelivery2(in *jlexer.Lexer, out *productTagRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5eeb761bEncodeGithubCom20201SkycodeInternalRestaurantsDelivery2(out *jwriter.Writer, in productTagRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v productTagRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5eeb761bEncodeGithubCom20201SkycodeInternalRestaurantsDelivery2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v productTagRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5eeb761bEncodeGithubCom20201SkycodeInternalRestaurantsDelivery2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *productTagRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5eeb761bDecodeGithubCom20201SkycodeInternalRestaurantsDelivery2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *productTagRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5eeb761bDecodeGithubCom20201SkycodeInternalRestaurantsDelivery2(l, v)
}
func easyjson5eeb761bDecodeGithubCom20201SkycodeInternalRestaurantsDelivery3(in *jlexer.Lexer, out *pointRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "radius":
			out.Radius = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5eeb761bEncodeGithubCom20201SkycodeInternalRestaurantsDelivery3(out *jwriter.Writer, in pointRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"radius\":"
		out.RawString(prefix)
		out.Float64(float64(in.Radius))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v pointRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5eeb761bEncodeGithubCom20201SkycodeInternalRestaurantsDelivery3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v pointRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5eeb761bEncodeGithubCom20201SkycodeInternalRestaurantsDelivery3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *pointRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5eeb761bDecodeGithubCom20201SkycodeInternalRestaurantsDelivery3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *pointRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5eeb761bDecodeGithubCom20201SkycodeInternalRestaurantsDelivery3(l, v)
}
func easyjson5eeb761bDecodeGithubCom20201SkycodeInternalRestaurantsDelivery4(in *jlexer.Lexer, out *RestaurantHandler) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5eeb761bEncodeGithubCom20201SkycodeInternalRestaurantsDelivery4(out *jwriter.Writer, in RestaurantHandler) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RestaurantHandler) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5eeb761bEncodeGithubCom20201SkycodeInternalRestaurantsDelivery4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RestaurantHandler) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5eeb761bEncodeGithubCom20201SkycodeInternalRestaurantsDelivery4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RestaurantHandler) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5eeb761bDecodeGithubCom20201SkycodeInternalRestaurantsDelivery4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RestaurantHandler) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5eeb761bDecodeGithubCom20201SkycodeInternalRestaurantsDelivery4(l, v)
}
