// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository.go

// Package mock_restpoints is a generated GoMock package.
package mock_restpoints

import (
	models "github.com/2020_1_Skycode/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InsertInto mocks base method
func (m *MockRepository) InsertInto(point *models.RestaurantPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertInto", point)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertInto indicates an expected call of InsertInto
func (mr *MockRepositoryMockRecorder) InsertInto(point interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertInto", reflect.TypeOf((*MockRepository)(nil).InsertInto), point)
}

// Delete mocks base method
func (m *MockRepository) Delete(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}

// GetAll mocks base method
func (m *MockRepository) GetAll() ([]*models.RestaurantPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.RestaurantPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll))
}

// GetPointsByRestID mocks base method
func (m *MockRepository) GetPointsByRestID(restID, count, page uint64) ([]*models.RestaurantPoint, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPointsByRestID", restID, count, page)
	ret0, _ := ret[0].([]*models.RestaurantPoint)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPointsByRestID indicates an expected call of GetPointsByRestID
func (mr *MockRepositoryMockRecorder) GetPointsByRestID(restID, count, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPointsByRestID", reflect.TypeOf((*MockRepository)(nil).GetPointsByRestID), restID, count, page)
}

// GetCloserPointByRestID mocks base method
func (m *MockRepository) GetCloserPointByRestID(restID uint64, pos *models.GeoPos) (*models.RestaurantPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloserPointByRestID", restID, pos)
	ret0, _ := ret[0].(*models.RestaurantPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloserPointByRestID indicates an expected call of GetCloserPointByRestID
func (mr *MockRepositoryMockRecorder) GetCloserPointByRestID(restID, pos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloserPointByRestID", reflect.TypeOf((*MockRepository)(nil).GetCloserPointByRestID), restID, pos)
}

// GetPointByID mocks base method
func (m *MockRepository) GetPointByID(id uint64) (*models.RestaurantPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPointByID", id)
	ret0, _ := ret[0].(*models.RestaurantPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPointByID indicates an expected call of GetPointByID
func (mr *MockRepositoryMockRecorder) GetPointByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPointByID", reflect.TypeOf((*MockRepository)(nil).GetPointByID), id)
}
