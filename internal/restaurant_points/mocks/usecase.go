// Code generated by MockGen. DO NOT EDIT.
// Source: ../usecase.go

// Package mock_restpoints is a generated GoMock package.
package mock_restpoints

import (
	models "github.com/2020_1_Skycode/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetPoint mocks base method
func (m *MockUseCase) GetPoint(id uint64) (*models.RestaurantPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoint", id)
	ret0, _ := ret[0].(*models.RestaurantPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoint indicates an expected call of GetPoint
func (mr *MockUseCaseMockRecorder) GetPoint(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoint", reflect.TypeOf((*MockUseCase)(nil).GetPoint), id)
}

// GetAllPoints mocks base method
func (m *MockUseCase) GetAllPoints() ([]*models.RestaurantPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPoints")
	ret0, _ := ret[0].([]*models.RestaurantPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPoints indicates an expected call of GetAllPoints
func (mr *MockUseCaseMockRecorder) GetAllPoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPoints", reflect.TypeOf((*MockUseCase)(nil).GetAllPoints))
}

// Delete mocks base method
func (m *MockUseCase) Delete(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUseCaseMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUseCase)(nil).Delete), id)
}
