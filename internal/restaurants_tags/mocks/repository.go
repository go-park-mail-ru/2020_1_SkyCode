// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository.go

// Package mock_resttags is a generated GoMock package.
package mock_resttags

import (
	models "github.com/2020_1_Skycode/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InsertInto mocks base method
func (m *MockRepository) InsertInto(tag *models.RestTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertInto", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertInto indicates an expected call of InsertInto
func (mr *MockRepositoryMockRecorder) InsertInto(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertInto", reflect.TypeOf((*MockRepository)(nil).InsertInto), tag)
}

// GetByID mocks base method
func (m *MockRepository) GetByID(id uint64) (*models.RestTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.RestTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), id)
}

// GetAll mocks base method
func (m *MockRepository) GetAll() ([]*models.RestTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.RestTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll))
}

// Update mocks base method
func (m *MockRepository) Update(tag *models.RestTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), tag)
}

// Delete mocks base method
func (m *MockRepository) Delete(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}

// CreateTagRestRelation mocks base method
func (m *MockRepository) CreateTagRestRelation(restID, tagID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTagRestRelation", restID, tagID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTagRestRelation indicates an expected call of CreateTagRestRelation
func (mr *MockRepositoryMockRecorder) CreateTagRestRelation(restID, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagRestRelation", reflect.TypeOf((*MockRepository)(nil).CreateTagRestRelation), restID, tagID)
}

// CheckTagRestRelation mocks base method
func (m *MockRepository) CheckTagRestRelation(restID, tagID uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTagRestRelation", restID, tagID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTagRestRelation indicates an expected call of CheckTagRestRelation
func (mr *MockRepositoryMockRecorder) CheckTagRestRelation(restID, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTagRestRelation", reflect.TypeOf((*MockRepository)(nil).CheckTagRestRelation), restID, tagID)
}

// GetRestTags mocks base method
func (m *MockRepository) GetRestTags(restID uint64) ([]*models.RestTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestTags", restID)
	ret0, _ := ret[0].([]*models.RestTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestTags indicates an expected call of GetRestTags
func (mr *MockRepositoryMockRecorder) GetRestTags(restID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestTags", reflect.TypeOf((*MockRepository)(nil).GetRestTags), restID)
}

// DeleteTagRestRelation mocks base method
func (m *MockRepository) DeleteTagRestRelation(restID, tagID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagRestRelation", restID, tagID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTagRestRelation indicates an expected call of DeleteTagRestRelation
func (mr *MockRepositoryMockRecorder) DeleteTagRestRelation(restID, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagRestRelation", reflect.TypeOf((*MockRepository)(nil).DeleteTagRestRelation), restID, tagID)
}
