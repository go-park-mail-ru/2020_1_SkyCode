// Code generated by MockGen. DO NOT EDIT.
// Source: ../usecase.go

// Package mock_resttags is a generated GoMock package.
package mock_resttags

import (
	models "github.com/2020_1_Skycode/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateTag mocks base method
func (m *MockUseCase) CreateTag(tag *models.RestTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTag indicates an expected call of CreateTag
func (mr *MockUseCaseMockRecorder) CreateTag(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockUseCase)(nil).CreateTag), tag)
}

// GetTagByID mocks base method
func (m *MockUseCase) GetTagByID(id uint64) (*models.RestTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByID", id)
	ret0, _ := ret[0].(*models.RestTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByID indicates an expected call of GetTagByID
func (mr *MockUseCaseMockRecorder) GetTagByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByID", reflect.TypeOf((*MockUseCase)(nil).GetTagByID), id)
}

// GetAllTags mocks base method
func (m *MockUseCase) GetAllTags() ([]*models.RestTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTags")
	ret0, _ := ret[0].([]*models.RestTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTags indicates an expected call of GetAllTags
func (mr *MockUseCaseMockRecorder) GetAllTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTags", reflect.TypeOf((*MockUseCase)(nil).GetAllTags))
}

// UpdateTag mocks base method
func (m *MockUseCase) UpdateTag(tag *models.RestTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTag indicates an expected call of UpdateTag
func (mr *MockUseCaseMockRecorder) UpdateTag(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockUseCase)(nil).UpdateTag), tag)
}

// DeleteTag mocks base method
func (m *MockUseCase) DeleteTag(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag
func (mr *MockUseCaseMockRecorder) DeleteTag(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockUseCase)(nil).DeleteTag), id)
}
